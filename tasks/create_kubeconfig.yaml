---
  - name: Create pxdr-sa, Secret, and ClusterRoleBinding on both clusters
    kubernetes.core.k8s:
      kubeconfig: "{{ item.kubeconfig }}"
      context: "{{ item.context }}"
      definition: "{{ pxdr_sa_manifest.split('---') }}"
      state: present
    loop: "{{ cluster_configs }}"
    loop_control:
      label: "{{ item.name }}"
    register: create_results

  - name: Extract Kubernetes API server URL for each cluster
    shell: >
      kubectl --kubeconfig={{ item.kubeconfig }} --context={{ item.context }} cluster-info
      | grep 'Kubernetes control plane\|Kubernetes master'
      | awk '{print $NF}'
    register: api_url_results
    loop: "{{ cluster_configs }}"
    changed_when: false
    ignore_errors: yes

  - name: Get pxdr-sa token secret name for each cluster
    shell: >
      kubectl --kubeconfig={{ item.kubeconfig }} --context={{ item.context }} -n {{ admin_namespace }}
      get secret -o=jsonpath="{.items[?(@.metadata.annotations.kubernetes\\.io/service-account\\.name=='{{ pxdr_service_account }}')].metadata.name}"
    register: token_secret_results
    loop: "{{ cluster_configs }}"
    changed_when: false
    ignore_errors: yes

  - name: Extract token from secret for each cluster
    shell: >
      kubectl --kubeconfig={{ item.kubeconfig }} --context={{ item.context }} -n {{ admin_namespace }}
      get secret {{ token_secret_results.results[my_idx].stdout }}
      -o "jsonpath={.data.token}" | base64 --decode
    register: token_extract_results
    loop: "{{ cluster_configs }}"
    loop_control:
        index_var: my_idx
    changed_when: false

  - name: Extract ca.crt from secret for each cluster
    shell: >
      kubectl --kubeconfig={{ item.kubeconfig }} --context={{ item.context }} -n {{ admin_namespace }}
      get secret {{ token_secret_results.results[my_idx].stdout }}
      -o "jsonpath={.data['ca.crt']}"
    register: cacert_extract_results
    loop: "{{ cluster_configs }}"
    changed_when: false
    loop_control:
        index_var: my_idx
    ignore_errors: no

  - name: Render pxdr-sa kubeconfig for each cluster (cert or insecure) and output locations
    copy:
      dest: "{{ item.kubeconfig_path }}"
      content: |
        apiVersion: v1
        kind: Config
        clusters:
          - name: default-cluster
            cluster:
              {% if cacert_extract_results.results[my_idx].stdout is defined and cacert_extract_results.results[my_idx].stdout | length > 0 %}
              certificate-authority-data: {{ cacert_extract_results.results[my_idx].stdout }}
              {% else %}
              insecure-skip-tls-verify: true
              {% endif %}
              server: {{ api_url_results.results[my_idx].stdout }}
        contexts:
          - name: default-context
            context:
              cluster: default-cluster
              namespace: {{ admin_namespace }}
              user: {{ pxdr_service_account }}
        current-context: default-context
        users:
          - name: {{ pxdr_service_account }}
            user:
              token: {{ token_extract_results.results[my_idx].stdout }}
    loop: "{{ cluster_configs }}"
    loop_control:
        index_var: my_idx


  - name: Debug final kubeconfig locations
    debug:
      msg: "Kubeconfig for {{ item.name }} written to: {{ item.kubeconfig_path }}"
    loop: "{{ cluster_configs }}"
